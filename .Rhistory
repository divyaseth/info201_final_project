2+0+1
print("Hello World")
print("Do the reading!")
3+5
3+5
print(my_var)
my_var<- 3
print(my_var)
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 0
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 0
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 2000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 2000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 2000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Wuhan"
# Assign your name to the variable `my_name`
my_name <- "Joanna"
# Assign your height (in inches) to a variable `my_height`
my_height <- 66.9
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 2000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
pring_break <- as.Date("2019-03-16")
today <- as.Date(Sys.Date(), "%a %b %d %X %Y")
days_to_break <- spring_break - today
print(days_to_break)
#Create a variable birthdays that contains a list of the birth dates
birthdays <- list(
Fang = as.Date("1969-11-07"),
Xiao = as.Date("1969-07-02")
)
parent_bday <- format(birthdays[["Fang"]],"%m/%d")
print(parent_bday)
#Use the lapply() function to create a new variable birthdays_2019 that contains a list of your family's birthdays in the year 2019.
change_year <- lapply(birthdays, format, "%d%b2019")
birthdays_2019 <- lapply(change_year, as.Date, "%d%b%Y")
print(birthdays_2019)
#Define a function called date_has_passed that takes in an argument that is a Date value
date_has_passed <- function(date){
date_no_year <- format(date, "%b %d")
date_without_year <- as.Date(date_no_year, "%b %d")
now_no_year <- format(Sys.Date(), "%b %d")
now_without_year <- as.Date(now_no_year, "%b %d")
date_without_year - now_without_year < 0
}
deadline <- as.Date("2019/01/23")
print(date_has_passed(deadline))
#Define a function called make_birthday_announcement that takes in two arguments: a name string and a Date value representing a birthday in the current year (i.e., 2019).
make_birthday_announcement <- function(name, date){
bdate <- as.Date(date)
if(date_has_passed(bdate) == TRUE){
days_left <- 365 - (Sys.Date()- bdate)
} else {
days_left <- bdate - Sys.Date()
}
message <- paste(name, "'s birthday is in", days_left, "days")
message
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[names(birthdays_2019)])
print(bday_announcements)
spring_break <- as.Date("2019-03-16")
today <- as.Date(Sys.Date(), "%a %b %d %X %Y")
days_to_break <- spring_break - today
print(days_to_break)
# 5
# create a new data frame for the state-level data
state_leve <- all_drinking %>%
filter(state == location)%>%
select(-location, -non_binge_drinking)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# 5
# create a new data frame for the state-level data
state_leve <- all_drinking %>%
filter(state == location)%>%
select(-location, -non_binge_drinking)
# Load the Any Drinking data set into R (the data/any_drinking.csv file).
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
# Load the Any Drinking data set into R (the data/any_drinking.csv file).
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
#install.packages("dplyr")
library("dplyr")
#install.packages("tidyr")
library("tidyr")
# Load the Any Drinking data set into R (the data/any_drinking.csv file).
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
# extract a data frame that has the state and location columns, as well as all the columns with data from 2012.
state_location_2012 <- select(any_drinking, state, location, both_sexes_2012, females_2012, males_2012)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
# Exercise 1: reading and querying a web API
install.packages("httr")
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("dplyr")
library("dplyr")
install.packages("jsonlite")
library("jsonlite")
install.packages("shiny")
library("shiny")
combined <- combine%>%
group_by(income_group)%>%
summarise(calorie2009 = mean(calorie_X2009),calorie2010 = mean(calorie_X2010),
calorie2011 = mean(calorie_X2011),calorie2012 = mean(calorie_X2012),
calorie2013 = mean(calorie_X2013),
sugar2009 = mean(sugar_X2009), sugar2010 = mean(sugar_X2010),
sugar2011 = mean(sugar_X2011), sugar2012 = mean(sugar_X2012),
sugar2013 = mean(sugar_X2013))#%>%
library("shiny")
library("plotly")
library("dplyr")
library("tidyr")
library("reshape2")
country <- read.csv("data/2009-2013.csv", stringsAsFactors = FALSE)
calories <- read.csv("data/sugar_calorie.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201_final_project")
country <- read.csv("data/2009-2013.csv", stringsAsFactors = FALSE)
calories <- read.csv("data/sugar_calorie.csv", stringsAsFactors = FALSE)
combine <- left_join(country, calories, by = "country")
combine[is.na(combine)] <- 0
combined <- combine%>%
group_by(income_group)%>%
summarise(calorie2009 = mean(calorie_X2009),calorie2010 = mean(calorie_X2010),
calorie2011 = mean(calorie_X2011),calorie2012 = mean(calorie_X2012),
calorie2013 = mean(calorie_X2013),
sugar2009 = mean(sugar_X2009), sugar2010 = mean(sugar_X2010),
sugar2011 = mean(sugar_X2011), sugar2012 = mean(sugar_X2012),
sugar2013 = mean(sugar_X2013))#%>%
combined
View(combined)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
