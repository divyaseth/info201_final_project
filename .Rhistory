as.Date(format(birthdays, "%m/%d/2019"), "%m/%d/%Y")
}
#Applies the function "change_format" to all items in a list. Takes in a list and a function,
#and return a list with same amount of items.
birthdays_2019 <- lapply(birthdays, change_format)
print(birthdays_2019)
#9.
name(birthdays_2019)
#9.
names(birthdays_2019)
#9.
?names
mapply(make_birthday_announcement, name(birthdays_2019), birthdays_2019)
mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
#9.
#
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
data()
Use ‘data(package = .rock(all.available = TRUE))’
data(package = .rock(all.available = TRUE))
data(rock = .packages(all.available = TRUE))
data(package = .packages(rock = TRUE))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
?runif
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salary_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$ got_raise <- salaries$salary_adjustments < 0
View(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
# How many employees got a raise?
salaries[salaries$got_raise]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments < 0
# How many employees got a raise?
salaries[salaries$got_raise]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE ,]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE , ]
nrow(salaries[salaries$got_raise == TRUE , ])
# What was the dollar value of the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments) , "employyees"]
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments) , "employees"]
data()
# What was the largest decrease in salaries between the two years?
data(Nile)
# What was the largest decrease in salaries between the two years?
data("Nile")
is.data.frame("Nile")
as .data.frame("Nile")
as.data.frame("Nile")
df <- as.data.frame("Nile")
is.data.frame("Nile")
is.data.frame("df")
is.data.frame(df)
View(df)
print(most_improved)
most_improved <- life_expectancy[life_expectancy$change == max_change, ]
#1.
life_expectancy <-read.csv(file = "data/life_expectancy.csv", stringsAsFactors = FALSE)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
View(b_port)
View(avg_arr_delay)
filter(b_port, arr_delay == max(arr_delay))
b_port <- left_join(avg_arr_delay, airports, by = c("dest"="faa"))
filter(b_port, arr_delay == max(arr_delay))
View(b_port)
large <- select(filter(b_port, arr_delay == max(arr_delay)), "name")
print(large)
as.data.frame(b_port)
large <- select(filter(b_port, arr_delay == max(arr_delay)), "name")
print(large)
View(large)
View(b_port)
is.data.frame(b_port)
print(max(b_port$arr_delay))
nrow(b_port)
arrange(b_port, arr_delay)
arrange(avg_arr_delay, arr_delay)
arrange(b_port, dec(arr_delay))
arrange(b_port, desc(arr_delay))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay)) %>%
select("name")
print(large_airport)
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay)) %>%
select(name)
print(large_airport)
View(flights)
filter(arr_delay == 11)
filter(flights, arr_delay == 11)
filter(flights, arr_delay == max(arr_delay))
filter(b_port, arr_delay == max(arr_delay), na.rm = TRUE)
filter(b_port, arr_delay == max(arr_delay, na.rm = TRUE))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE))
select(name)
b_port <- left_join(avg_arr_delay, airports, by = c("dest"="faa"))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
select(name)
print(large_airport)
smallest_airport <- b_port %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
b_line <- left_join(avg_arr_delay, airlines, by = c("dest"="faa"))
b_line <- left_join(flights, avg_arr_delay, by ="dest")
delay_airline <- left_join(b_line, airlines, by = "carrier")
smallest_airport <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
View(delay_airline)
rm(flights)
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
avg_arr_delay_line <- flights %>%
group_by(carrier)%>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
delay_airline <- left_join(avg_arr_delay_line, airlines, by = "carrier")
View(delay_airline)
View(delay_airline)
smallest_airport <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
smallest_airline <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
View(dep_delay_by_month)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay))
View(arr_delay_by_dest)
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
arr_delay = mean(dep_delay, na.rm = TRUE)
)
View(arr_delay_by_dest)
high_delay_dest <- arr_delay_by_dest %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
select(dest)
print(high_delay_dest)
View(flights)
mutate(flights, speed = distance/(hour+minute/60))
dest_name <- filter(flights, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
print(dest_name)
dest_name <- filter(flights, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
flight_2 <- mutate(flights, speed = distance/(hour+minute/60))
View(flights_2)
View(flight_2)
dest_name <- filter(flight_2, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
print(dest_name)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
setwd("~/Desktop/INFO201/a6-collaboration-shi-lin-li")
setwd("~/Desktop/INFO201/info201_final_project")
#2 Dataframes joined together for assignment.
data <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
library(dplyr)
year_data <- read.csv(file = "data/2009-2013.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/a6-collaboration-shi-lin-li")
year_data <- read.csv(file = "data/2009-2013.csv", stringsAsFactors = FALSE)
sugar_calorie <- read.csv(file = "data/sugar_calorie.csv", stringsAsFactors = FALSE)
#2 Dataframes joined together for assignment.
data <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
View(data)
sugar_calorie <- read.csv(file = "data/sugar_calorie.csv", stringsAsFactors = FALSE)
year_data <- read.csv(file = "data/2009-2013.csv", stringsAsFactors = FALSE)
life_cal <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
life_cal <- life_cal %>%
mutate(sugar_pct_2010 = (sugar_X2010 * 4) / calorie_X2010)
View(life_cal)
life_cal <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
life_cal <- life_cal %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 1000)
life_cal <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
life_cal <- life_cal %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10)
life_cal <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
life_cal <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10)
life_cal <- left_join(year_data, sugar_calorie, by = "country") %>%
select(-X)
life_cal <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10) %>%
select(-region, -sugar_X2009:sugar_X2013)
life_cal_pct <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10)
View(life_cal_pct)
source('~/Desktop/INFO201/a8-data-app-shi-lin-li/ui_server.R')
life_only <- life_cal %>% select(le_2009:le_2013)
View(life_only)
range(life_only)
life_only <- life_cal %>% select(le_2009:le_2013, na.rm = T)
# Combine the life expectancy data with the calorie data
life_cal <- left_join(year_data, sugar_calorie, by = "country", na.rm = T) %>%
select(-X)
life_only <- life_cal %>% select(le_2009:le_2013)
range(life_only)
summary(life_only)
max(life_only)
summary(life_only)[1,1]
is.numeric(summary(life_only)[1,1])
as.numeric(summary(life_only)[1,1])
as.numeric(summary(life_only)[1,1])
gather(le_2009, le_2010, le_2011, le_2012, le_2013)
library(tidyr)
library("shiny")
library(dplyr)
library(ggplot2)
library(tidyr)
options(scipen = 999)
gather(le_2009, le_2010, le_2011, le_2012, le_2013)
life_only %>% gather(le_2009, le_2010, le_2011, le_2012, le_2013)
range(life_only %>% gather(le_2009, le_2010, le_2011, le_2012, le_2013))
life_gather <- life_only %>% gather(le_2009, le_2010, le_2011, le_2012, le_2013)
View(life_gather)
life_gather <- life_only %>% gather(le_2009:le_2013)
range(life_gather$le_2010)
life_only <- na.omit(life_cal %>% select(le_2009:le_2013))
life_gather <- life_only %>% gather(le_2009, le_2010, le_2011, le_2012, le_2013)
range(life_gather$le_2010)
life_range <- round(range(life_gather$le_2010))
life_range <- round(range(life_gather$le_2010) * 100) / 100
runApp('~/Desktop/INFO201/info201_final_project')
setwd("~/Desktop/INFO201/info201_final_project")
setwd("~/Desktop/INFO201/info201_final_project")
runApp()
runApp()
# Calculate the amount of calories comming from sugar
life_cal_pct <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10)
# Combine the life expectancy data with the calorie data
life_cal <- left_join(year_data, sugar_calorie, by = "country", na.rm = T) %>%
select(-X)
# Calculate the amount of calories comming from sugar
life_cal_pct <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10)
View(life_cal_pct)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cal_colname <- paste0("calorie_X", "2010")
sugar_colname <- paste0("sugar_pct_", "2010")
le_colname <- paste0("le_", "2010")
filtered_life <- life_cal_pct %>%
select(cal_colname, le_colname, sugar_colname) %>%
# filter(le_colname > input$age[1] & le_colname < input$age[2])
filter(le_colname > 48 & le_colname < 84)
View(filtered_life)
source(app.R)
setwd("~/Desktop/INFO201/info201_final_project")
sugar_calorie <- read.csv(file = "data/sugar_calorie.csv", stringsAsFactors = FALSE)
year_data <- read.csv(file = "data/2009-2013.csv", stringsAsFactors = FALSE)
# Combine the life expectancy data with the calorie data
life_cal <- left_join(year_data, sugar_calorie, by = "country", na.rm = T) %>%
select(-X)
# Calculate the amount of calories comming from sugar
life_cal_pct <- life_cal %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10)
cal_colname <- paste0("calorie_X", "2010")
sugar_colname <- paste0("sugar_pct_", "2010")
le_colname <- paste0("le_", "2010")
filtered_life <- life_cal_pct %>%
select(cal_colname, le_colname, sugar_colname) %>%
# filter(le_colname > input$age[1] & le_colname < input$age[2])
filter(le_colname > 48 & le_colname < 84)
View(life_cal_pct)
sugar_calorie <- read.csv(file = "data/sugar_calorie.csv", stringsAsFactors = FALSE)
year_data <- read.csv(file = "data/2009-2013.csv", stringsAsFactors = FALSE)
year_data_gathered <- year_data %>%
gather(
key = year,
value = life_expectancy,
na.rm = T,
le2009:le2013
)
year_data_gathered <- year_data %>%
gather(
key = year,
value = life_expectancy,
na.rm = T,
le_2009:le_2013
)
View(year_data_gathered)
cal_colname <- paste0("calorie_X", "2010")
sugar_colname <- paste0("sugar_pct_", "2010")
le_colname <- paste0("le_", "2010")
year_data_gathered <- year_data %>%
gather(
key = year,
value = life_expectancy,
na.rm = T,
le_2009:le_2013
) %>% filter(year == le_colname)
View(year_data_gathered)
# Calculate the amount of calories comming from sugar
life_cal_pct <- sugar_calorie %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10) %>%
select(country, sugar_pct_2009:sugar_pct_2013)
View(life_cal_pct)
# Calculate the amount of calories comming from sugar
life_cal_pct <- sugar_calorie %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10) %>%
select(country, sugar_pct_2009:sugar_pct_2013) %>%
gather(
key = year,
value = sugar_pct,
na.rm = T,
- country
) %>% filter(year == sugar_colname)
View(life_cal_pct)
# Gather the data frame for sugar persent only
life_cal_pct <- sugar_calorie %>%
mutate(sugar_pct_2009 = round((sugar_X2009 * 4) / calorie_X2009 * 1000) / 10) %>%
mutate(sugar_pct_2010 = round((sugar_X2010 * 4) / calorie_X2010 * 1000) / 10) %>%
mutate(sugar_pct_2011 = round((sugar_X2011 * 4) / calorie_X2011 * 1000) / 10) %>%
mutate(sugar_pct_2012 = round((sugar_X2012 * 4) / calorie_X2012 * 1000) / 10) %>%
mutate(sugar_pct_2013 = round((sugar_X2013 * 4) / calorie_X2013 * 1000) / 10) %>%
select(country, sugar_pct_2009:sugar_pct_2013) %>%
gather(
key = year,
value = sugar_pct,
na.rm = T,
- country
) %>% filter(year == sugar_colname) %>%
left_join(year_data_gathered, by = "country")
View(life_cal_pct)
calorie_only <- sugar_calorie %>%
select(country, calorie_X2009:calorie_X2013)
View(calorie_only)
calorie_only <- sugar_calorie %>%
select(country, calorie_X2009:calorie_X2013) %>%
gather(
key = year,
value = calorie,
na.rm = T,
- country
) %>% filter(year == cal_colname) %>%
left_join(life_cal_pct, by = "country")
View(calorie_only)
# Gather the calorie data table for a certain year
# Join with the sugar and life expectancy table to become a full data table
all_data <- sugar_calorie %>%
select(country, calorie_X2009:calorie_X2013) %>%
gather(
key = year,
value = calorie,
na.rm = T,
- country
) %>% filter(year == cal_colname) %>%
left_join(life_cal_pct, by = "country")
View(all_data)
filtered_life <- all_data %>%
# filter(le_colname > input$age[1] & le_colname < input$age[2])
filter(life_expectancy > 48 & life_expectancy < 84)
View(filtered_life)
ggplot(data = filtered_life) +
geom_point(mapping = aes_string(x = "life_expectancy", y = "calorie",
color = "sugar_pct"),
alpha = 0.6
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(birthdays_2019)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("plotly")
install.packages("plotly")
library("plotly")
runApp()
runApp()
runApp()
setwd("~/Desktop/INFO201/info201_final_project")
setwd("~/Desktop/INFO201/info201_final_project")
setwd("~/Desktop/INFO201/info201_final_project")
shiny::runApp()
install.packages("DT")
runApp()
